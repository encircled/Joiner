name: Maven Release

on:  
  workflow_dispatch:  # Optional: allows manual triggering
permissions:
  contents: write
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Git user
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-package: 'jdk'
          java-version: '17'
          check-latest: true
          server-id: 'ossrh'
          server-username: ${{ secrets.OSSRH_USERNAME }}
          server-password: ${{ secrets.OSSRH_PASSWORD }}
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.GPG_PASSPHRASE }}
          cache: 'maven'

      - name: View settings.xml
        run: cat /home/runner/.m2/settings.xml

      - name: Prepare release
        run: mvn -B release:prepare -Dgpg.passphrase="${{ secrets.GPG_PASSPHRASE }}"

      - name: Perform release
        run: mvn -B release:perform -Dgpg.passphrase="${{ secrets.GPG_PASSPHRASE }}"


#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Set up Git user
#        run: |
#          git config --global user.name "GitHub Actions"
#          git config --global user.email "actions@github.com"
#
#      - name: Set up GitHub authentication
#        run: |
#          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'  # Specify the required Java version
#          distribution: 'temurin'
#          cache: maven
#          server-id: github
#
#      - name: View settings.xml
#        run: cat /home/runner/.m2/settings.xml
#
#      - name: Import GPG key
#        run: |
#          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
#          echo "default-key $(gpg --list-secret-keys --keyid-format LONG | grep 'sec' | awk '{print $2}' | cut -d'/' -f2)" >> ~/.gnupg/gpg.conf
#          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
#        env:
#          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
#
#      - name: Set up GPG passphrase
#        run: |
#          gpg --batch --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" --list-keys
#        env:
#          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
#
#      - name: Set up Maven settings
#        run: |
#          mkdir -p ~/.m2
#          echo "<settings>
#                  <servers>
#                    <server>
#                      <id>ossrh</id>
#                      <username>${{ secrets.OSSRH_USERNAME }}</username>
#                      <password>${{ secrets.OSSRH_PASSWORD }}</password>
#                    </server>
#                    <server>
#                      <id>github</id>
#                      <username>${{ secrets.GITHUB_ACTOR }}</username>
#                      <password>${{ secrets.GITHUB_TOKEN }}</password>
#                    </server>
#                  </servers>
#                  <profiles>
#                    <profile>
#                      <id>gpg</id>
#                      <properties>
#                        <gpg.executable>gpg</gpg.executable>
#                        <gpg.passphrase>${{ secrets.GPG_PASSPHRASE }}</gpg.passphrase>
#                      </properties>
#                    </profile>
#                  </profiles>
#                  <activeProfiles>
#                    <activeProfile>gpg</activeProfile>
#                  </activeProfiles>
#                </settings>" > ~/.m2/settings.xml
#
#      - name: View settings.xml 2
#        run: cat /home/runner/.m2/settings.xml
#
#      - name: Maven release prepare
#        run: mvn -B release:prepare -Dgpg.passphrase="${{ secrets.GPG_PASSPHRASE }}"
#
#      - name: Maven release perform
#        run: mvn -B release:perform -Dgpg.passphrase="${{ secrets.GPG_PASSPHRASE }}"
